//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.03.19 at 12:52:39 PM IST 
//


package com.vps.dds.jax;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the com.vps.dds.jax package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
public class ObjectFactory
    extends com.vps.dds.jax.impl.runtime.DefaultJAXBContextImpl
{

    private static java.util.HashMap defaultImplementations = new java.util.HashMap(16, 0.75F);
    private static java.util.HashMap rootTagMap = new java.util.HashMap();
    public final static com.vps.dds.jax.impl.runtime.GrammarInfo grammarInfo = new com.vps.dds.jax.impl.runtime.GrammarInfoImpl(rootTagMap, defaultImplementations, (com.vps.dds.jax.ObjectFactory.class));
    public final static java.lang.Class version = (com.vps.dds.jax.impl.JAXBVersion.class);

    static {
        defaultImplementations.put((com.vps.dds.jax.DatabaseConfig.class), "com.vps.dds.jax.impl.DatabaseConfigImpl");
        defaultImplementations.put((com.vps.dds.jax.TableInfoType.class), "com.vps.dds.jax.impl.TableInfoTypeImpl");
        defaultImplementations.put((com.vps.dds.jax.Password.class), "com.vps.dds.jax.impl.PasswordImpl");
        defaultImplementations.put((com.vps.dds.jax.FieldName.class), "com.vps.dds.jax.impl.FieldNameImpl");
        defaultImplementations.put((com.vps.dds.jax.DatabaseConfigType.class), "com.vps.dds.jax.impl.DatabaseConfigTypeImpl");
        defaultImplementations.put((com.vps.dds.jax.TableName.class), "com.vps.dds.jax.impl.TableNameImpl");
        defaultImplementations.put((com.vps.dds.jax.FieldInfoType.class), "com.vps.dds.jax.impl.FieldInfoTypeImpl");
        defaultImplementations.put((com.vps.dds.jax.DatabaseType.class), "com.vps.dds.jax.impl.DatabaseTypeImpl");
        defaultImplementations.put((com.vps.dds.jax.User.class), "com.vps.dds.jax.impl.UserImpl");
        defaultImplementations.put((com.vps.dds.jax.DbUserType.class), "com.vps.dds.jax.impl.DbUserTypeImpl");
        defaultImplementations.put((com.vps.dds.jax.FieldType.class), "com.vps.dds.jax.impl.FieldTypeImpl");
        rootTagMap.put(new javax.xml.namespace.QName("", "password"), (com.vps.dds.jax.Password.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "user"), (com.vps.dds.jax.User.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "DatabaseConfig"), (com.vps.dds.jax.DatabaseConfig.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "FieldName"), (com.vps.dds.jax.FieldName.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "FieldType"), (com.vps.dds.jax.FieldType.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "tableName"), (com.vps.dds.jax.TableName.class));
    }

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.vps.dds.jax
     * 
     */
    public ObjectFactory() {
        super(grammarInfo);
    }

    /**
     * Create an instance of the specified Java content interface.
     * 
     * @param javaContentInterface
     *     the Class object of the javacontent interface to instantiate
     * @return
     *     a new instance
     * @throws JAXBException
     *     if an error occurs
     */
    public java.lang.Object newInstance(java.lang.Class javaContentInterface)
        throws javax.xml.bind.JAXBException
    {
        return super.newInstance(javaContentInterface);
    }

    /**
     * Get the specified property. This method can only be
     * used to get provider specific properties.
     * Attempting to get an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param name
     *     the name of the property to retrieve
     * @return
     *     the value of the requested property
     * @throws PropertyException
     *     when there is an error retrieving the given property or value
     */
    public java.lang.Object getProperty(java.lang.String name)
        throws javax.xml.bind.PropertyException
    {
        return super.getProperty(name);
    }

    /**
     * Set the specified property. This method can only be
     * used to set provider specific properties.
     * Attempting to set an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param value
     *     the value of the property to be set
     * @param name
     *     the name of the property to retrieve
     * @throws PropertyException
     *     when there is an error processing the given property or value
     */
    public void setProperty(java.lang.String name, java.lang.Object value)
        throws javax.xml.bind.PropertyException
    {
        super.setProperty(name, value);
    }

    /**
     * Create an instance of DatabaseConfig
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.vps.dds.jax.DatabaseConfig createDatabaseConfig()
        throws javax.xml.bind.JAXBException
    {
        return new com.vps.dds.jax.impl.DatabaseConfigImpl();
    }

    /**
     * Create an instance of TableInfoType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.vps.dds.jax.TableInfoType createTableInfoType()
        throws javax.xml.bind.JAXBException
    {
        return new com.vps.dds.jax.impl.TableInfoTypeImpl();
    }

    /**
     * Create an instance of Password
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.vps.dds.jax.Password createPassword()
        throws javax.xml.bind.JAXBException
    {
        return new com.vps.dds.jax.impl.PasswordImpl();
    }

    /**
     * Create an instance of Password
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.vps.dds.jax.Password createPassword(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new com.vps.dds.jax.impl.PasswordImpl(value);
    }

    /**
     * Create an instance of FieldName
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.vps.dds.jax.FieldName createFieldName()
        throws javax.xml.bind.JAXBException
    {
        return new com.vps.dds.jax.impl.FieldNameImpl();
    }

    /**
     * Create an instance of FieldName
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.vps.dds.jax.FieldName createFieldName(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new com.vps.dds.jax.impl.FieldNameImpl(value);
    }

    /**
     * Create an instance of DatabaseConfigType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.vps.dds.jax.DatabaseConfigType createDatabaseConfigType()
        throws javax.xml.bind.JAXBException
    {
        return new com.vps.dds.jax.impl.DatabaseConfigTypeImpl();
    }

    /**
     * Create an instance of TableName
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.vps.dds.jax.TableName createTableName()
        throws javax.xml.bind.JAXBException
    {
        return new com.vps.dds.jax.impl.TableNameImpl();
    }

    /**
     * Create an instance of TableName
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.vps.dds.jax.TableName createTableName(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new com.vps.dds.jax.impl.TableNameImpl(value);
    }

    /**
     * Create an instance of FieldInfoType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.vps.dds.jax.FieldInfoType createFieldInfoType()
        throws javax.xml.bind.JAXBException
    {
        return new com.vps.dds.jax.impl.FieldInfoTypeImpl();
    }

    /**
     * Create an instance of DatabaseType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.vps.dds.jax.DatabaseType createDatabaseType()
        throws javax.xml.bind.JAXBException
    {
        return new com.vps.dds.jax.impl.DatabaseTypeImpl();
    }

    /**
     * Create an instance of User
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.vps.dds.jax.User createUser()
        throws javax.xml.bind.JAXBException
    {
        return new com.vps.dds.jax.impl.UserImpl();
    }

    /**
     * Create an instance of User
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.vps.dds.jax.User createUser(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new com.vps.dds.jax.impl.UserImpl(value);
    }

    /**
     * Create an instance of DbUserType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.vps.dds.jax.DbUserType createDbUserType()
        throws javax.xml.bind.JAXBException
    {
        return new com.vps.dds.jax.impl.DbUserTypeImpl();
    }

    /**
     * Create an instance of FieldType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.vps.dds.jax.FieldType createFieldType()
        throws javax.xml.bind.JAXBException
    {
        return new com.vps.dds.jax.impl.FieldTypeImpl();
    }

    /**
     * Create an instance of FieldType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.vps.dds.jax.FieldType createFieldType(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new com.vps.dds.jax.impl.FieldTypeImpl(value);
    }

}
